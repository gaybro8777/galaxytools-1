<tool id="transindel" name="transIndel" version="@VERSION@.0" python_template_version="3.5">
    <description>detect indels from RNAseq or DNAseq BWA-MEM mapping</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <expand macro="version_command" />
    <command detect_errors="exit_code"><![CDATA[
        #if $analyze.input_src == 'RNA'
            #if $analyze.rfasta.rfasta_source == "history":
                ln -s '$analyze.rfasta.ref_fa_hist' ref.fa &&
            #else:
                ln -s '$analyze.rfasta.ref_fa_builtin.fields.path' ref.fa &&
            #end if
            transIndel_build_RNA.py -i '$analyze.input' -o 'transIndel.bam'
            ## Get reference FASTA
            -r ref.fa
            ## Get reference GTF
            #if $analyze.rgtf.rgtf_source == "history":
                -g '$analyze.rgtf.ref_gtf_hist'
            #else:
                -g '$analyze.rgtf.ref_gtf_builtin.fields.path'
            #end if
            --mapq_cutoff $analyze.mapq_cutoff
            --max_del_length $analyze.max_del_length
            #if $analyze.transIndel_call.run_transIndel_call == 'yes'
                && transIndel_call.py -i 'transIndel.bam' -o transIndel
                   -r ref.fa
                   -c $analyze.transIndel_call.call_opts.min_observation_count
                   -d $analyze.transIndel_call.call_opts.min_depth
                   -f $analyze.transIndel_call.call_opts.min_allele_frequency
                   -l $analyze.transIndel_call.call_opts.min_length
                   -m $analyze.transIndel_call.call_opts.min_mapq
                   #if $analyze.transIndel_call.call_opts.regions.regions_source != 'none':
                       -t '$analyze.transIndel_call.call_opts.regions.target'
                   #end if
            #end if
        #elif $analyze.input_src == 'DNA'
            transIndel_build_DNA.py -i '$analyze.input' -o 'transIndel.bam'
            --mapq_cutoff $analyze.mapq_cutoff
            --max_del_length $analyze.max_del_length
            #if $analyze.transIndel_call.run_transIndel_call == 'yes'
                #if $analyze.rfasta.rfasta_source == "history":
                    && ln -s '$analyze.transIndel_call.rfasta.ref_fa_hist' ref.fa
                #else:
                    && ln -s '$analyze.transIndel_call.rfasta.ref_fa_builtin.fields.path' ref.fa
                #end if
                && transIndel_call.py -i 'transIndel.bam' -o transIndel
                   -r ref.fa 
                   -c $analyze.transIndel_call.call_opts.min_observation_count
                   -d $analyze.transIndel_call.call_opts.min_depth
                   -f $analyze.transIndel_call.call_opts.min_allele_frequency
                   -l $analyze.transIndel_call.call_opts.min_length
                   -m $analyze.transIndel_call.call_opts.min_mapq
                   #if $analyze.transIndel_call.call_opts.regions.regions_source != 'none':
                       -t '$analyze.transIndel_call.call_opts.regions.target'
                   #end if
            #end if
        #elif $analyze.input_src == 'transIndel'
            #if $analyze.rfasta.rfasta_source == "history":
                ln -s '$analyze.rfasta.ref_fa_hist' ref.fa &&
            #else:
                ln -s '$analyze.rfasta.ref_fa_builtin.fields.path' ref.fa &&
            #end if
            transIndel_call.py -i '$analyze.input' -o 'transIndel'
                   -r re.fasta
		   -c $analyze.call_opts.min_observation_count
                   -d $analyze.call_opts.min_depth
                   -f $analyze.call_opts.min_allele_frequency
                   -l $analyze.call_opts.min_length
                   -m $analyze.call_opts.min_mapq
                   #if $analyze.call_opts.regions.regions_source != 'none':
                       -t '$analyze.call_opts.regions.target'
                   #end if
        #end if
    ]]></command>
    <inputs>
        <conditional name="analyze">
            <param name="input_src" type="select" label="">
                <option value="RNA">RNA bwa-mem bam</option>
                <option value="DNA">DNA bwa-mem bam</option>
                <option value="transIndel">transIndel bam</option>
            </param>
            <when value="RNA">
                <param name="input" type="data" format="bam" label="bwa-mem bam from RNAseq data"/>             
                <expand macro="reference_genome"/>
                <expand macro="reference_gtf"/>
                <param name="splice_site_half_bin_size" argument="-s" type="integer" value="20" min="0" label="splice site half bin size" help="(splice site half bin size)"/>
                <expand macro="build_opts" token_default_mapq_cutoff="60"/>
                <expand macro="transindel_call"/>
            </when> 
            <when value="DNA">
                <param name="input" type="data" format="bam" label="bwa-mem bam from DNAseq data"/>             
                <expand macro="build_opts" token_default_mapq_cutoff="15"/>
                <expand macro="transindel_call">
                    <expand macro="reference_genome"/>
	        </expand>
	  </when> 
            <when value="transIndel">
                <param name="input" type="data" format="bam" label="transIndel bam"/>             
                <expand macro="reference_genome"/>
                <expand macro="call_opts"/>
            </when> 
        </conditional>
    </inputs>
    <outputs>
        <data name="output_bam" format="bam" label="${tool.name} on ${on_string}: transIndel.bam" from_work_dir="transIndel.bam">
            <filter>analyze['input_src'] != 'transindel' </filter>
        </data>
        <data name="output_vcf" format="vcf" label="${tool.name} on ${on_string}: transIndel.indel.vcf" from_work_dir="transIndel.indel.vcf" >
            <filter>analyze['input_src'] == 'transindel' or analyze['transIndel_call']['run_transIndel_call'] == 'yes'</filter>
        </data>
    </outputs>
    <tests>
        <test>
            <conditional name="analyze">
                <param name="input_src" value="RNA"/>
                <param name="input" ftype="bam" value="RNA.bam"/>             
                <conditional name="rfasta">
                    <param name="rfasta_source" value="history"/>
                    <param name="ref_fa_hist" ftype="fasta" value="GRCh38_20.fa" />
                </conditional>
                <conditional name="rgtf">
                    <param name="rgtf_source" value="history"/>
                    <param name="ref_gtf_hist" ftype="gtf" value="GRCh38_20.gtf" />
                </conditional>
            </conditional>
            <output name="output_vcf">
                <assert_contents>
                    <has_text text="SVTYPE=DEL" />
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
        TODO: Fill in help.
    ]]></help>
    <expand macro="citations" />
</tool>
